name: Build & Release (Nabzram)

on:
  push:
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }} / ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm

          # Windows
          - os: windows
            arch: x86_64
            runner: windows-latest
          - os: windows
            arch: arm64
            runner: windows-11-arm

          # macOS
          - os: macos
            arch: arm64
            runner: macos-latest
          - os: macos
            arch: x86_64
            runner: macos-13

    env:
      OUTPUT_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Cache Bun deps
        uses: actions/cache@v4
        with:
          path: |
            ui/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.arch }}-bun-${{ hashFiles('ui/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-bun-

      - name: Install frontend deps
        working-directory: ui
        shell: bash
        run: bun install --frozen-lockfile

      - name: Build frontend
        working-directory: ui
        shell: bash
        run: bun run build

      # Linux GUI system deps for PyGObject/pycairo/WebKitGTK
      - name: System deps (Linux GUI)
        if: matrix.os == 'linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config build-essential python3-dev \
            libcairo2-dev libgirepository1.0-dev \
            libgtk-3-dev libwebkit2gtk-4.1-dev

      # Python deps (tip: make uvloop conditional in requirements.txt)
      # uvloop==0.21.0; sys_platform != "win32"
      - name: Install Python deps (Linux/macOS)
        if: matrix.os != 'windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Python deps (Windows)
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Optional: UPX for smaller binaries
      - name: Install UPX (Linux)
        if: matrix.os == 'linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y upx ccache || true

      - name: Install UPX (Windows)
        if: matrix.os == 'windows'
        shell: pwsh
        run: choco install -y upx || ver > NUL

      - name: Install UPX (macOS)
        if: matrix.os == 'macos'
        shell: bash
        run: brew install upx || true

      # =========================
      # Build with Nuitka-Action
      # =========================

      # Linux (default mode = app → onefile; output goes to build/)
      - name: Build (Nuitka Linux)
        if: matrix.os == 'linux'
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          script-name: main.py
          include-data-dir: |
            ui/dist=ui/dist
          include-data-files: |
            assets/icon.png=assets/icon.png
          enable-plugins: |
            pywebview
            upx
          linux-icon: assets/icon.png
          output-file: nabzram

      # Windows x64 (default mode = app → onefile)
      - name: Build (Nuitka Windows x64)
        if: matrix.os == 'windows' && matrix.arch == 'x86_64'
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          script-name: main.py
          include-data-dir: |
            ui/dist=ui/dist
          include-data-files: |
            assets/icon.png=assets/icon.png
          enable-plugins: |
            pywebview
            upx
          windows-console-mode: disable
          windows-icon-from-ico: assets/icon.ico
          output-file: nabzram

      # Windows ARM64 (same defaults; keep unless you hit onefile issues)
      - name: Build (Nuitka Windows ARM64)
        if: matrix.os == 'windows' && matrix.arch == 'arm64'
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          script-name: main.py
          include-data-dir: |
            ui/dist=ui/dist
          include-data-files: |
            assets/icon.png=assets/icon.png
          enable-plugins: |
            pywebview
            upx
          windows-console-mode: disable
          windows-icon-from-ico: assets/icon.ico
          output-file: nabzram

      # macOS (default mode = app → .app bundle; set icon/name)
      - name: Build (Nuitka macOS)
        if: matrix.os == 'macos'
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          script-name: main.py
          include-data-dir: |
            ui/dist=ui/dist
          include-data-files: |
            assets/icon.png=assets/icon.png
          enable-plugins: |
            pywebview
          macos-app-icon: assets/icon.icns
          macos-app-name: Nabzram
          output-file: nabzram

      # Post-build packaging / artifacts

      - name: Zip macOS .app (if produced)
        if: matrix.os == 'macos'
        shell: bash
        run: |
          if [ -d "$OUTPUT_DIR/nabzram.app" ]; then
            cd "$OUTPUT_DIR"
            ditto -c -k --sequesterRsrc --keepParent "nabzram.app" "nabzram-macos-${{ matrix.arch }}.zip"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nabzram-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/nabzram
            build/nabzram.exe
            build/nabzram-macos-*.zip
            build/nabzram.app
          if-no-files-found: ignore

  release:
    name: Release assets
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect files
        id: aset
        shell: bash
        run: |
          shopt -s globstar nullglob
          files=(
            artifacts/**/build/nabzram
            artifacts/**/build/nabzram.exe
            artifacts/**/build/nabzram-macos-*.zip
          )
          printf '%s\n' "${files[@]}" | tee files.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          cat files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.aset.outputs.files }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
